# pry
snippet pry "pry" b
require 'pry'; binding.pry
endsnippet

# Sorbet
snippet tsig "extend T::Sig" b
extend T::Sig
endsnippet

snippet sig "signature" b
sig { params(${1:param: Type}).returns(${0:Type}) }
endsnippet

snippet prop "Structure prop" b
prop :${1:Field}, ${0:Type}
endsnippet

snippet const "Structure const prop" b
const :${1:Field}, ${0:Type}
endsnippet

snippet struct "structure" b
class ${1:MyStruct} < T::Struct
	$0
end
endsnippet

snippet enum "enum" b
class ${1:MyEnum} < T::Enum
	enums do
		${2:Value} = new
		$0
	end
end
endsnippet

snippet tnil "T.nilable()"
T.nilable($0)
endsnippet

# Testing
snippet desc
describe '${1:logical grouping}' do
	${0}
end
endsnippet

snippet it
it '${1:does something}' do
	${0}
end
endsnippet

snippet exp "Rspec expect"
expect($1).$0
endsnippet

snippet tb "Rspec expect to be"
expect($1).to be($0)
endsnippet

snippet te "RSpec expect to equal"
expect($1).to eq($0)
endsnippet
