{
  // Conditionals
  "if": {
    "prefix": "if",
    "body": ["if ${1:condition}", "\t$0", "end"],
  },
  "if else": {
    "prefix": "ife",
    "body": ["if ${1:condition}", "\t$2", "else", "\t$0", "end"],
  },
  "if elsif": {
    "prefix": "ifei",
    "body": [
      "if ${1:condition}",
      "\t$2",
      "elsif ${3:second_condition}",
      "\t$0",
      "end",
    ],
  },
  "if elsif else": {
    "prefix": "ifee",
    "body": [
      "if ${1:condition}",
      "\t$2",
      "elsif ${3:second_condition}",
      "\t$4",
      "else",
      "\t$0",
      "end",
    ],
  },
  "case": {
    "prefix": "case",
    "body": [
      "case ${1:condition}",
      "when $2",
      "\t$3",
      "when $4",
      "\t$5",
      "else",
      "\t$6",
      "end",
    ],
  },

  // Loops
  "for loop": {
    "prefix": "for",
    "body": ["for ${1:value} in ${2:enumerable} do", "\t$0", "end"],
  },
  "while loop": {
    "prefix": "while",
    "body": ["while ${1:condition}", "\t$0", "end"],
  },

  // Modules
  "Module definition": {
    "prefix": "mod",
    "body": ["module ${1:ModuleName}", "\t$0", "end"],
  },

  // Methods
  "define method": {
    "prefix": "def",
    "body": ["def ${1:method_name}${2:(${3:args})}", "\t${0}", "end"],
  },
  "define class method": {
    "prefix": "defself",
    "body": ["def self.${1:method_name}${2:(${3:args})}", "\t$0", "end"],
  },
  "initialize method definition": {
    "prefix": "definit",
    "body": ["def initialize(${1:args})", "\t$0", "end"],
  },

  // Classes
  "Class definition with initialize": {
    "prefix": "class init",
    "body": [
      "class ${1:ClassName}",
      "\tdef initialize(${2:args})",
      "\t\t$0",
      "\tend",
      "end",
    ],
  },
  "Class definition": {
    "prefix": "class",
    "body": ["class ${1:ClassName}", "\t$0", "end"],
  },

  // // Blocks
  // "Insert do … end block": {
  //   "prefix": "do",
  //   "body": ["do", "\t$0", "end"],
  // },
  // "Insert do |variable| … end block": {
  //   "prefix": "dop",
  //   "body": ["do |${1:variable}|", "\t$0", "end"],
  // },
  // "Insert inline block with variable": {
  //   "prefix": ["b", "{"],
  //   "body": "{ |${1:variable}| $2 }",
  // },
  //
  // // Require
  // "Insert require": {
  //   "prefix": "req",
  //   "body": "require \"${1}\"$0",
  // },
  // "Insert require_relative": {
  //   "prefix": "reqr",
  //   "body": "require_relative '${1:}'$0",
  // },
  //
  // // Loops
  // "Insert each with inline block": {
  //   "prefix": "ea",
  //   "body": "each { |${1:e}| $0 }",
  // },
  // "Insert each with multiline block": {
  //   "prefix": "ead",
  //   "body": ["each do |${1:e}|", "\t$0", "end"],
  // },
  // "Insert each with index inline block": {
  //   "prefix": "eawi",
  //   "body": "each_with_index { |${1:e}, ${2:i}| $0 }",
  // },
  // "Insert each with index multiline block": {
  //   "prefix": "eawid",
  //   "body": ["each_with_index do |${1:e}, ${2:i}|", "\t$0", "end"],
  // },
  // "Insert reduce inline block": {
  //   "prefix": "red",
  //   "body": "reduce(${1:init}) { |${2:mem}, ${3:var}| $0 }",
  // },
  // "Insert reduce multiline block": {
  //   "prefix": "redd",
  //   "body": ["reduce(${1:init}) do |${2:mem}, ${3:var}|", "\t$0", "end"],
  // },
  // "Insert map inline block": {
  //   "prefix": "map",
  //   "body": "map { |${1:e}| $0 }",
  // },
  // "Insert map multiline block": {
  //   "prefix": "mapd",
  //   "body": ["map do |${1:e}|", "\t$0", "end"],
  // },
  //
  // "Insert key: value": {
  //   "prefix": ":",
  //   "body": "${1:key}: ${2:value}",
  // },
  //
  // // Debugging
  // "Insert debug call": {
  //   "prefix": "debug",
  //   "body": "debugger",
  // },
  // "Insert pry call": {
  //   "prefix": "pry",
  //   "body": "require 'pry'; binding.pry",
  // },
  //
  // // Exceptions
  // "Exception block": {
  //   "prefix": "begin",
  //   "body": [
  //     "begin",
  //     "\t$1",
  //     "rescue ${2:StandardError} => ${3:exception}",
  //     "\t$0",
  //     "end",
  //   ],
  // },
  // "Exception block with ensure": {
  //   "prefix": "begin ensure",
  //   "body": [
  //     "begin",
  //     "\t$1",
  //     "rescue ${2:StandardError} => ${3:exception}",
  //     "\t$4",
  //     "ensure",
  //     "\t$0",
  //     "end",
  //   ],
  // },
  // "Exception block with else and ensure": {
  //   "prefix": "begin else",
  //   "body": [
  //     "begin",
  //     "\t$1",
  //     "rescue ${2:StandardError} => ${3:exception}",
  //     "\t$4",
  //     "else",
  //     "\t$5",
  //     "ensure",
  //     "\t$0",
  //     "end",
  //   ],
  // },
}
