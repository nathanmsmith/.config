{
  // "Class Definition": {
  //   "body": [
  //     "class ${1:name} {",
  //     "\tconstructor(${2:parameters}) {",
  //     "\t\t$0",
  //     "\t}",
  //     "}"
  //   ],
  //   "description": "Class Definition",
  //   "prefix": "class"
  // },
  // "For Loop": {
  //   "body": [
  //     "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
  //     "\tconst ${3:element} = ${2:array}[${1:index}];",
  //     "\t$0",
  //     "}"
  //   ],
  //   "description": "For Loop",
  //   "prefix": "for"
  // },
  // "For-Each Loop using =>": {
  //   "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "});"],
  //   "description": "For-Each Loop using =>",
  //   "prefix": "foreach =>"
  // },
  // "For-In Loop": {
  //   "body": [
  //     "for (const ${1:key} in ${2:object}) {",
  //     "\tif (${2:object}.hasOwnProperty(${1:key})) {",
  //     "\t\tconst ${3:element} = ${2:object}[${1:key}];",
  //     "\t\t$0",
  //     "\t}",
  //     "}"
  //   ],
  //   "description": "For-In Loop",
  //   "prefix": "forin"
  // },
  // "For-Of Loop": {
  //   "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
  //   "description": "For-Of Loop",
  //   "prefix": "forof"
  // },
  // "If Statement": {
  //   "body": ["if (${1:condition}) {", "\t$0", "}"],
  //   "description": "If Statement",
  //   "prefix": "if"
  // },
  // "If-Else Statement": {
  //   "body": ["if (${1:condition}) {", "\t$0", "} else {", "\t", "}"],
  //   "description": "If-Else Statement",
  //   "prefix": "ifelse"
  // },
  // "Import external module.": {
  //   "body": ["import { $0 } from \"${1:module}\";"],
  //   "description": "Import external module.",
  //   "prefix": "import statement"
  // },
  // "Interface Definition": {
  //   "body": ["interface ${1:name} {", "\t$0", "}"],
  //   "description": "Interface Definition",
  //   "prefix": "inter"
  // },
  // "Log error to console": {
  //   "body": ["console.error($1);"],
  //   "description": "Log error to the console",
  //   "prefix": "error"
  // },
  // "Log warning to console": {
  //   "body": ["console.warn($1);"],
  //   "description": "Log warning to the console",
  //   "prefix": "warn"
  // },
  // "Set Timeout Function": {
  //   "body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout});"],
  //   "description": "Set Timeout Function",
  //   "prefix": "settimeout"
  // },
  // "Switch Statement": {
  //   "body": [
  //     "switch (${1:key}) {",
  //     "\tcase ${2:value}:",
  //     "\t\t$0",
  //     "\t\tbreak;",
  //     "",
  //     "\tdefault:",
  //     "\t\tbreak;",
  //     "}"
  //   ],
  //   "description": "Switch Statement",
  //   "prefix": "switch"
  // },
  // "Throw Exception": {
  //   "body": ["throw \"$1\";", "$0"],
  //   "description": "Throw Exception",
  //   "prefix": "throw"
  // },
  // "Try-Catch Statement": {
  //   "body": ["try {", "\t$0", "} catch (${1:error}) {", "\t", "}"],
  //   "description": "Try-Catch Statement",
  //   "prefix": "trycatch"
  // },
  // "While Statement": {
  //   "body": ["while (${1:condition}) {", "\t$0", "}"],
  //   "description": "While Statement",
  //   "prefix": "while"
  // },
  // "console.log": {
  //   "body": ["console.log($0);"],
  //   "description": "console.log",
  //   "prefix": "cl"
  // },
  // "console.log with label": {
  //   "body": ["console.log(\"$0: \", $0);"],
  //   "description": "console.log with label",
  //   "prefix": "cll"
  // },
  // "function": {
  //   "body": ["function ${1:name}(${2:params}:${3:type}) {", "\t$0", "}"],
  //   "description": "Function Statement",
  //   "prefix": "function"
  // }
}
